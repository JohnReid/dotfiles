# __PROFILE__=1
test -n "$__PROFILE__" && echo "Executing .bashrc: $0"
test -n "$__PROFILE__" && echo "0: $(date +%T)"

#
# Set up development environment
#
. $HOME/.env_fns
LOCAL=$HOME/local
eval $($HOME/bin/update-env \
    --path-pre $HOME/bin \
    --path-pre $HOME/bin/UCSC-tools \
)

#
# For virtualenvwrapper
#
# VENVWRAPPERSCRIPT=/usr/share/virtualenvwrapper/virtualenvwrapper.sh
# [ -f $VENVWRAPPERSCRIPT ] && source $VENVWRAPPERSCRIPT
# export WORKON_HOME=$HOME/.virtualenvs

test -n "$__PROFILE__" && echo "1: $(date +%T)"

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

stty stop '' # disable XON/XOFF flow control
stty start '' # disable XON/XOFF flow control
stty -ixon # disable XON/XOFF flow control
stty -ixoff # disable XON/XOFF flow control

test -n "$__PROFILE__" && echo "2: $(date +%T)"

#osx color terminal
export CLICOLOR=1
# don't put duplicate lines in the history. See bash(1) for more options
# don't overwrite GNU Midnight Commander's setting of `ignorespace'.
HISTCONTROL=$HISTCONTROL${HISTCONTROL+,}ignoredups
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

test -n "$__PROFILE__" && echo "3: $(date +%T)"

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# Set up TERM variables.
# vt100 and xterm have no color in vim (at least on unixs), but if we call them xterm-color, they will.
# (vt100 for F-Secure SSH.)
# This may well be the case for some other terms, so I'm putting them here.
# Also set up a variable to indicate whether to set up the title functions.
# TODO gnome-terminal, or however it reports itself
case $TERM in

  screen)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  xterm-color|color_xterm|rxvt|Eterm|screen*) # screen.linux|screen-w
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  linux)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=false
  ;;

  xterm|vt100)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=true
  ;;

  *xterm*|eterm|rxvt*)
    TERM_IS_COLOR=true
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=true
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=true
    TERM_CAN_TITLE=true
  ;;

  *)
    TERM_IS_COLOR=false
    TERM_NOT_RECOGNIZED_AS_COLOR_BY_VIM=false
    TERM_NOT_RECOGNIZED_BY_SUN_UTILS=false
    TERM_CAN_TITLE=false
  ;;

esac

test -n "$__PROFILE__" && echo "4: $(date +%T)"

# Alias definitions.
if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

test -n "$__PROFILE__" && echo "5: $(date +%T)"

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
#if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    #. /etc/bash_completion
#fi

# Set $TERM for libvte terminals that set $TERM wrong (like gnome-terminal)
{
  [ "_$TERM" = "_xterm" ] && type ldd && type grep && type tput && [ -L "/proc/$PPID/exe" ] && {
    if ldd /proc/$PPID/exe | grep libvte; then
      if [ "`tput -Txterm-256color colors`" = "256" ]; then
        TERM=xterm-256color
      elif [ "`tput -Txterm-256color colors`" = "256" ]; then
        TERM=xterm-256color
      elif tput -T xterm; then
        TERM=xterm
      fi
    fi
  }
} >/dev/null 2>/dev/null

test -n "$__PROFILE__" && echo "6: $(date +%T)"

venwrap=`type -P virtualenvwrapper.sh`
if [ "$venwrap" != "" ]; then
    source $venwrap
fi

vim=`type -P nvim`
if [ "$vim" == "" ]; then
    vim="gvim -v"
fi
# osx vim
if [ -x "/Applications/MacVim.app/Contents/MacOS/Vim" ]; then
    PATH=/Applications/MacVim.app/Contents/MacOS/:$PATH
fi

#PYTHONSTARTUP=~/.pythonrc.py
#export PYTHONSTARTUP

# Download a file from PWF
function pwf-download() {
  for URL in $*
  do
    pwf "cd Downloads; wget $URL"
    FILE=$(basename $URL)
    scp pwf:Downloads/$FILE ~/Downloads
  done
}


#
# Extract a range of pages from a PDF
# http://www.linuxjournal.com/content/tech-tip-extract-pages-pdf
#
function pdfextractpages()
{
    # this function uses 3 arguments:
    #     $1 is the first page of the range to extract
    #     $2 is the last page of the range to extract
    #     $3 is the input file
    #     output file will be named "inputfile_pXX-pYY.pdf"
    USAGE="USAGE: $0 <pdf file> <first page> <last page>"
    PDF=${1:?$USAGE}
    FIRST=${2:?$USAGE}
    LAST=${3:?$USAGE}
    gs -sDEVICE=pdfwrite -dNOPAUSE -dBATCH -dSAFER \
       -dFirstPage=$FIRST \
       -dLastPage=$LAST \
       -sOutputFile=${PDF%.pdf}_p$FIRST-p$LAST.pdf \
       $PDF
}

test -n "$__PROFILE__" && echo "7: $(date +%T)"

# ANSI color codes
RS="\[\033[0m\]"    # reset
HC="\[\033[1m\]"    # hicolor
UL="\[\033[4m\]"    # underline
INV="\[\033[7m\]"   # inverse background and foreground
FBLK="\[\033[30m\]" # foreground black
FRED="\[\033[31m\]" # foreground red
FGRN="\[\033[32m\]" # foreground green
FYEL="\[\033[33m\]" # foreground yellow
FBLE="\[\033[34m\]" # foreground blue
FMAG="\[\033[35m\]" # foreground magenta
FCYN="\[\033[36m\]" # foreground cyan
FWHT="\[\033[37m\]" # foreground white
BBLK="\[\033[40m\]" # background black
BRED="\[\033[41m\]" # background red
BGRN="\[\033[42m\]" # background green
BYEL="\[\033[43m\]" # background yellow
BBLE="\[\033[44m\]" # background blue
BMAG="\[\033[45m\]" # background magenta
BCYN="\[\033[46m\]" # background cyan
BWHT="\[\033[47m\]" # background white

# >>>>>>>>>>>>>>>>>>>>>>> Enabling Biopieces if installed <<<<<<<<<<<<<<<<<<<<<<

# Installation instructions:
# http://code.google.com/p/biopieces/wiki/Installation

# Modify the below paths according to your settings.
# If you have followed the installation instructions step-by-step
# the below should work just fine.

export BP_DIR="$HOME/local/src/biopieces"  # Installation dir
export BP_DATA="$HOME/Data/biopieces"   # Contains genomic data etc.
export BP_TMP="$HOME/tmp"        # Required temporary directory.
export BP_LOG="$BP_DATA/log"     # Required log directory.

if [ -f "$BP_DIR/bp_conf/bashrc" ]; then
    source "$BP_DIR/bp_conf/bashrc"
fi  

# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>><<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

export PERL_LOCAL_LIB_ROOT="/home/john/local/perl5";
export PERL_MB_OPT="--install_base /home/john/local/perl5";
export PERL_MM_OPT="INSTALL_BASE=/home/john/local/perl5";
export PERL5LIB="/home/john/local/perl5/lib/perl5/x86_64-linux-gnu-thread-multi:/home/john/local/perl5/lib/perl5";
export PATH="/home/john/local/perl5/bin:$PATH";
ANDROID_PLATFORM_TOOLS=/home/john/src/android-sdk-linux/platform-tools
[ -d $ANDROID_PLATFORM_TOOLS ] && PATH=$PATH:$ANDROID_PLATFORM_TOOLS

test -n "$__PROFILE__" && echo "8: $(date +%T)"

# Personal additions should be added ABOVE this line.
[ -f /BSU/sitewide/sys.bashrc ] && . /BSU/sitewide/sys.bashrc

test -n "$__PROFILE__" && echo "9: $(date +%T)"

# dircolors... make sure that we have a color terminal, dircolors exists, and ls supports it.
if $TERM_IS_COLOR && ( dircolors --help && ls --color ) &> /dev/null; then
  # For some reason, the unixs machines need me to use $HOME instead of ~
  # List files from highest priority to lowest.  As soon as the loop finds one that works, it will exit.
  for POSSIBLE_DIR_COLORS in "$HOME/.dir_colors" "/etc/DIR_COLORS"; do
    [[ -f "$POSSIBLE_DIR_COLORS" ]] && [[ -r "$POSSIBLE_DIR_COLORS" ]] && eval `dircolors -b "$POSSIBLE_DIR_COLORS"` && break
  done

  alias ls="ls --color=auto"
  alias ll="ls --color=auto -l"
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
else
  # No color, so put a slash at the end of directory names, etc. to differentiate.
  alias ls="ls -F"
  alias ll="ls -lF"
fi

test -n "$__PROFILE__" && echo "10: $(date +%T)"

# Change color of prompt depending on hostname
case "$(hostname)" in
"josquin")
    PSCOLOR='36m'
    ;;
"dufay")
    PSCOLOR='32m'
    ;;
"machaut")
    PSCOLOR='33m'
    ;;
"login-mrc-bsu")
    PSCOLOR='35m'
    ;;
*)
    PSCOLOR='34m'
    ;;
esac

#PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
#PS1='\[\033[01;31m\]\w\[\033[00m\]\n${debian_chroot:+($debian_chroot)}\[\033[01;34m\]\u\[\033[01;32m\]@\[\033[01;34m\]\h\[\033[00m\]\$ '
PS1='\[\033[01;31m\]\w\[\033[00m\]\n${debian_chroot:+($debian_chroot)}\[\033[01;34m\]\u\[\033[01;${PSCOLOR}\]@\h\[\033[00m\]\$ '

#
# Functions to add git and svn status to prompt
#
parse_git_branch ()
{
  git branch 2> /dev/null | grep '*' | sed 's#*\ \(.*\)#(git::\1)#'
}
parse_svn_branch() {
  parse_svn_url | sed -e 's#^'"$(parse_svn_repository_root)"'##g' | awk -F / '{print "(svn::"$1 "/" $2 ")"}'
}
parse_svn_url() {
  svn info 2>/dev/null | sed -ne 's#^URL: ##p'
}
parse_svn_repository_root() {
  svn info 2>/dev/null | sed -ne 's#^Repository Root: ##p'
}
export EDITOR="$vim"
export GIT_EDITOR="$vim"

# Add git and svn branch names
if [ 'SunOS' == $(uname -s) ]
then
    export PS1="$PS1\$(parse_git_branch) "
else
    export PS1="$PS1\$(parse_git_branch)\$(parse_svn_branch) "
fi

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# Predictable SSH authentication socket location.
# see: http://unix.stackexchange.com/questions/75681/why-do-i-have-to-re-set-env-vars-in-tmux-when-i-re-attach
SOCK="/tmp/ssh-auth-sock-$USER"
if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]
then
    # echo "Relinking $SOCK to $SSH_AUTH_SOCK"
    rm -f $SOCK
    ln -sf $SSH_AUTH_SOCK $SOCK
    export SSH_AUTH_SOCK=$SOCK
fi

export IRONLANGUAGESDIR=/home/john/src/IronLanguages
export IRONPYTHONPATH=$IRONLANGUAGESDIR/External.LCA_RESTRICTED/Languages/IronPython/27/Lib/:$IRONPYTHONPATH
alias ironpy='mono $IRONLANGUAGESDIR/bin/Release/ipy.exe'


#
# For CUDA and torch
TORCH_ACTIVATE=/home/john/src/torch/install/bin/torch-activate
[ -f $TORCH_ACTIVATE ] && . $TORCH_ACTIVATE
case "$(hostname)" in
"schmidt")
    export CUDA_BIN_PATH=/usr/local/cuda/
    ;;
"antheil")
    export CUDA_BIN_PATH=/usr/local/cuda/
    ;;
esac

#
# Source machine specific setup if it exists
MACHINERC=$HOME/.bashrc.$(hostname)
if [ -f "$MACHINERC" ]
then
    source "$MACHINERC"
fi

unset __PROFILE__
